object DiffEquation {
  println("Welcome to the Scala worksheet")       //> Welcome to the Scala worksheet
  
  
  val xa = 0.0                                    //> xa  : Double = 0.0
	val xb = 5.0                              //> xb  : Double = 5.0
	val N  = 100                              //> N  : Int = 100
	val h  = (xb-xa)/N;                       //> h  : Double = 0.05
	val Psi0 = 0.0                            //> Psi0  : Double = 0.0
	val Psi1 = 1.0E-6                         //> Psi1  : Double = 1.0E-6
	val Psi  = new Array[Double](N+1)         //> Psi  : Array[Double] = Array(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.
                                                  //| 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0
                                                  //| , 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                                                  //|  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
                                                  //| 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0
                                                  //| .0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.
                                                  //| 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0
                                                  //| )
	val x    = new Array[Double](N+1)         //> x  : Array[Double] = Array(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                                                  //|  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
                                                  //| 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0
                                                  //| .0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.
                                                  //| 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0
                                                  //| , 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                                                  //|  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
	for(i <- 0 to N) x(i) = i*h
	
	val C =h*h/12.0                           //> C  : Double = 2.0833333333333337E-4
	
	val V  = new Array[Double](N+1)           //> V  : Array[Double] = Array(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                                                  //|  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
                                                  //| 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0
                                                  //| .0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.
                                                  //| 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0
                                                  //| , 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                                                  //|  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
	
	
	def k(E:Double, i:Int) = 2.0*E - V(i)     //> k: (E: Double, i: Int)Double

	
	def  PsiN(E:Double) = {
	   solve(E)
	   Psi(N)
	}                                         //> PsiN: (E: Double)Double

	def solve(E:Double ) {
		/* begin of the Numerov-Algorithm */
		Psi(0) = Psi0   // Psi(xa) = 0;
		Psi(1) = Psi1
		for( i<-1 to N-1) {
			Psi(i+1) = ( 2*(1.0 - 5.0*C*k(E,i))*Psi(i) -
					(1.0 + C*k(E,i-1) )*Psi(i-1) )/(1.0+C*k(E,i+1))
			  //System.out.printf("x=%8.4f    psi = %8.4f\n",x(i+1),Psi(i));
		}
		// Normalisation
		//normilize();
	}                                         //> solve: (E: Double)Unit
	
	PsiN(0.3)                                 //> res0: Double = -1.724955298162968E-5
  
  import myMath.zeros._
  
  brent(PsiN, 0.0, 3.0)                           //> x = 3.2806822000208693  f(x) = 1.8702871606307574E-6
                                                  //| x = 34.08805875578921  f(x) = -1.0755800609899518E-6
                                                  //| x = 1.795472983511985  f(x) = -5.295405337291141E-7
                                                  //| x = 1.774606110285109  f(x) = 5.4220906847817534E-8
                                                  //| x = 1.7765322967967891  f(x) = -1.1525022830708301E-10
                                                  //| x = 1.7765282077453415  f(x) = 5.668017725441009E-15
                                                  //| x = 1.7765282079464313  f(x) = -1.2395622024130514E-18
                                                  //| res1: (Double, Int) = (1.7765282079464313,15)
  secant(PsiN, 0.0, 3.0)                          //> x = 1.6304835590581301  f(x) = 4.27486624853958E-6
                                                  //| x = 1.7801125360053711  f(x) = -1.008758635576956E-7
                                                  //| x = 1.7766630748908603  f(x) = -3.801212522634934E-9
                                                  //| x = 1.776528002195311  f(x) = 5.799405053869605E-12
                                                  //| x = 1.7765282079580687  f(x) = -3.2789403836456335E-16
                                                  //| res2: (Double, Int) = (1.7765282079580687,8)
  
}